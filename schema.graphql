schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

# mutation root
type mutation_root {
  # delete data from the table: "todos"
  delete_todos(
    # filter the rows which have to be deleted
    where: todos_bool_exp!
  ): todos_mutation_response

  # delete single row from the table: "todos"
  delete_todos_by_pk(todoid: bigint!): todos

  # delete data from the table: "users"
  delete_users(
    # filter the rows which have to be deleted
    where: users_bool_exp!
  ): users_mutation_response

  # delete single row from the table: "users"
  delete_users_by_pk(id: bigint!): users

  # insert data into the table: "todos"
  insert_todos(
    # the rows to be inserted
    objects: [todos_insert_input!]!

    # on conflict condition
    on_conflict: todos_on_conflict
  ): todos_mutation_response

  # insert a single row into the table: "todos"
  insert_todos_one(
    # the row to be inserted
    object: todos_insert_input!

    # on conflict condition
    on_conflict: todos_on_conflict
  ): todos

  # insert data into the table: "users"
  insert_users(
    # the rows to be inserted
    objects: [users_insert_input!]!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users_mutation_response

  # insert a single row into the table: "users"
  insert_users_one(
    # the row to be inserted
    object: users_insert_input!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users

  # update data of the table: "todos"
  update_todos(
    # increments the integer columns with given value of the filtered values
    _inc: todos_inc_input

    # sets the columns of the filtered rows to the given values
    _set: todos_set_input

    # filter the rows which have to be updated
    where: todos_bool_exp!
  ): todos_mutation_response

  # update single row of the table: "todos"
  update_todos_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: todos_inc_input

    # sets the columns of the filtered rows to the given values
    _set: todos_set_input
    pk_columns: todos_pk_columns_input!
  ): todos

  # update data of the table: "users"
  update_users(
    # increments the integer columns with given value of the filtered values
    _inc: users_inc_input

    # sets the columns of the filtered rows to the given values
    _set: users_set_input

    # filter the rows which have to be updated
    where: users_bool_exp!
  ): users_mutation_response

  # update single row of the table: "users"
  update_users_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: users_inc_input

    # sets the columns of the filtered rows to the given values
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "todos"
  todos(
    # distinct select on columns
    distinct_on: [todos_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todos_order_by!]

    # filter the rows returned
    where: todos_bool_exp
  ): [todos!]!

  # fetch aggregated fields from the table: "todos"
  todos_aggregate(
    # distinct select on columns
    distinct_on: [todos_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todos_order_by!]

    # filter the rows returned
    where: todos_bool_exp
  ): todos_aggregate!

  # fetch data from the table: "todos" using primary key columns
  todos_by_pk(todoid: bigint!): todos

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: bigint!): users
}

scalar status

# expression to compare columns of type status. All fields are combined with logical 'AND'.
input status_comparison_exp {
  _eq: status
  _gt: status
  _gte: status
  _in: [status!]
  _is_null: Boolean
  _lt: status
  _lte: status
  _neq: status
  _nin: [status!]
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "todos"
  todos(
    # distinct select on columns
    distinct_on: [todos_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todos_order_by!]

    # filter the rows returned
    where: todos_bool_exp
  ): [todos!]!

  # fetch aggregated fields from the table: "todos"
  todos_aggregate(
    # distinct select on columns
    distinct_on: [todos_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todos_order_by!]

    # filter the rows returned
    where: todos_bool_exp
  ): todos_aggregate!

  # fetch data from the table: "todos" using primary key columns
  todos_by_pk(todoid: bigint!): todos

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: bigint!): users
}

# columns and relationships of "todos"
type todos {
  description: String
  status: status
  todoid: bigint!
  userid: bigint
}

# aggregated selection of "todos"
type todos_aggregate {
  aggregate: todos_aggregate_fields
  nodes: [todos!]!
}

# aggregate fields of "todos"
type todos_aggregate_fields {
  avg: todos_avg_fields
  count(columns: [todos_select_column!], distinct: Boolean): Int
  max: todos_max_fields
  min: todos_min_fields
  stddev: todos_stddev_fields
  stddev_pop: todos_stddev_pop_fields
  stddev_samp: todos_stddev_samp_fields
  sum: todos_sum_fields
  var_pop: todos_var_pop_fields
  var_samp: todos_var_samp_fields
  variance: todos_variance_fields
}

# order by aggregate values of table "todos"
input todos_aggregate_order_by {
  avg: todos_avg_order_by
  count: order_by
  max: todos_max_order_by
  min: todos_min_order_by
  stddev: todos_stddev_order_by
  stddev_pop: todos_stddev_pop_order_by
  stddev_samp: todos_stddev_samp_order_by
  sum: todos_sum_order_by
  var_pop: todos_var_pop_order_by
  var_samp: todos_var_samp_order_by
  variance: todos_variance_order_by
}

# input type for inserting array relation for remote table "todos"
input todos_arr_rel_insert_input {
  data: [todos_insert_input!]!
  on_conflict: todos_on_conflict
}

# aggregate avg on columns
type todos_avg_fields {
  todoid: Float
  userid: Float
}

# order by avg() on columns of table "todos"
input todos_avg_order_by {
  todoid: order_by
  userid: order_by
}

# Boolean expression to filter rows from the table "todos". All fields are combined with a logical 'AND'.
input todos_bool_exp {
  _and: [todos_bool_exp]
  _not: todos_bool_exp
  _or: [todos_bool_exp]
  description: String_comparison_exp
  status: status_comparison_exp
  todoid: bigint_comparison_exp
  userid: bigint_comparison_exp
}

# unique or primary key constraints on table "todos"
enum todos_constraint {
  # unique or primary key constraint
  todos_pkey
}

# input type for incrementing integer column in table "todos"
input todos_inc_input {
  todoid: bigint
  userid: bigint
}

# input type for inserting data into table "todos"
input todos_insert_input {
  description: String
  status: status
  todoid: bigint
  userid: bigint
}

# aggregate max on columns
type todos_max_fields {
  description: String
  todoid: bigint
  userid: bigint
}

# order by max() on columns of table "todos"
input todos_max_order_by {
  description: order_by
  todoid: order_by
  userid: order_by
}

# aggregate min on columns
type todos_min_fields {
  description: String
  todoid: bigint
  userid: bigint
}

# order by min() on columns of table "todos"
input todos_min_order_by {
  description: order_by
  todoid: order_by
  userid: order_by
}

# response of any mutation on the table "todos"
type todos_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [todos!]!
}

# input type for inserting object relation for remote table "todos"
input todos_obj_rel_insert_input {
  data: todos_insert_input!
  on_conflict: todos_on_conflict
}

# on conflict condition type for table "todos"
input todos_on_conflict {
  constraint: todos_constraint!
  update_columns: [todos_update_column!]!
  where: todos_bool_exp
}

# ordering options when selecting data from "todos"
input todos_order_by {
  description: order_by
  status: order_by
  todoid: order_by
  userid: order_by
}

# primary key columns input for table: "todos"
input todos_pk_columns_input {
  todoid: bigint!
}

# select columns of table "todos"
enum todos_select_column {
  # column name
  description

  # column name
  status

  # column name
  todoid

  # column name
  userid
}

# input type for updating data in table "todos"
input todos_set_input {
  description: String
  status: status
  todoid: bigint
  userid: bigint
}

# aggregate stddev on columns
type todos_stddev_fields {
  todoid: Float
  userid: Float
}

# order by stddev() on columns of table "todos"
input todos_stddev_order_by {
  todoid: order_by
  userid: order_by
}

# aggregate stddev_pop on columns
type todos_stddev_pop_fields {
  todoid: Float
  userid: Float
}

# order by stddev_pop() on columns of table "todos"
input todos_stddev_pop_order_by {
  todoid: order_by
  userid: order_by
}

# aggregate stddev_samp on columns
type todos_stddev_samp_fields {
  todoid: Float
  userid: Float
}

# order by stddev_samp() on columns of table "todos"
input todos_stddev_samp_order_by {
  todoid: order_by
  userid: order_by
}

# aggregate sum on columns
type todos_sum_fields {
  todoid: bigint
  userid: bigint
}

# order by sum() on columns of table "todos"
input todos_sum_order_by {
  todoid: order_by
  userid: order_by
}

# update columns of table "todos"
enum todos_update_column {
  # column name
  description

  # column name
  status

  # column name
  todoid

  # column name
  userid
}

# aggregate var_pop on columns
type todos_var_pop_fields {
  todoid: Float
  userid: Float
}

# order by var_pop() on columns of table "todos"
input todos_var_pop_order_by {
  todoid: order_by
  userid: order_by
}

# aggregate var_samp on columns
type todos_var_samp_fields {
  todoid: Float
  userid: Float
}

# order by var_samp() on columns of table "todos"
input todos_var_samp_order_by {
  todoid: order_by
  userid: order_by
}

# aggregate variance on columns
type todos_variance_fields {
  todoid: Float
  userid: Float
}

# order by variance() on columns of table "todos"
input todos_variance_order_by {
  todoid: order_by
  userid: order_by
}

# columns and relationships of "users"
type users {
  email: String
  firstname: String
  id: bigint!
  lastname: String
  telephone: String
}

# aggregated selection of "users"
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

# aggregate fields of "users"
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

# order by aggregate values of table "users"
input users_aggregate_order_by {
  avg: users_avg_order_by
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
  stddev: users_stddev_order_by
  stddev_pop: users_stddev_pop_order_by
  stddev_samp: users_stddev_samp_order_by
  sum: users_sum_order_by
  var_pop: users_var_pop_order_by
  var_samp: users_var_samp_order_by
  variance: users_variance_order_by
}

# input type for inserting array relation for remote table "users"
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

# aggregate avg on columns
type users_avg_fields {
  id: Float
}

# order by avg() on columns of table "users"
input users_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  email: String_comparison_exp
  firstname: String_comparison_exp
  id: bigint_comparison_exp
  lastname: String_comparison_exp
  telephone: String_comparison_exp
}

# unique or primary key constraints on table "users"
enum users_constraint {
  # unique or primary key constraint
  users_pkey
}

# input type for incrementing integer column in table "users"
input users_inc_input {
  id: bigint
}

# input type for inserting data into table "users"
input users_insert_input {
  email: String
  firstname: String
  id: bigint
  lastname: String
  telephone: String
}

# aggregate max on columns
type users_max_fields {
  email: String
  firstname: String
  id: bigint
  lastname: String
  telephone: String
}

# order by max() on columns of table "users"
input users_max_order_by {
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  telephone: order_by
}

# aggregate min on columns
type users_min_fields {
  email: String
  firstname: String
  id: bigint
  lastname: String
  telephone: String
}

# order by min() on columns of table "users"
input users_min_order_by {
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  telephone: order_by
}

# response of any mutation on the table "users"
type users_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [users!]!
}

# input type for inserting object relation for remote table "users"
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

# on conflict condition type for table "users"
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

# ordering options when selecting data from "users"
input users_order_by {
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  telephone: order_by
}

# primary key columns input for table: "users"
input users_pk_columns_input {
  id: bigint!
}

# select columns of table "users"
enum users_select_column {
  # column name
  email

  # column name
  firstname

  # column name
  id

  # column name
  lastname

  # column name
  telephone
}

# input type for updating data in table "users"
input users_set_input {
  email: String
  firstname: String
  id: bigint
  lastname: String
  telephone: String
}

# aggregate stddev on columns
type users_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "users"
input users_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type users_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "users"
input users_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type users_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "users"
input users_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type users_sum_fields {
  id: bigint
}

# order by sum() on columns of table "users"
input users_sum_order_by {
  id: order_by
}

# update columns of table "users"
enum users_update_column {
  # column name
  email

  # column name
  firstname

  # column name
  id

  # column name
  lastname

  # column name
  telephone
}

# aggregate var_pop on columns
type users_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "users"
input users_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type users_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "users"
input users_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type users_variance_fields {
  id: Float
}

# order by variance() on columns of table "users"
input users_variance_order_by {
  id: order_by
}

